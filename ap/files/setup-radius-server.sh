#!/bin/bash
# setup-radius-server.sh
# Install & configure FreeRADIUS for WPA2-Enterprise (PEAP/MSCHAPv2) on Debian/Ubuntu/Kali.
# Usage: sudo ./setup-radius-server.sh [--start]

set -euo pipefail

SCRIPT_DIR="$(dirname "$0")"
REPO_ROOT="$(dirname "$SCRIPT_DIR")"
FILES_DIR="${FILES_DIR:-$SCRIPT_DIR}"
AP_IP="${AP_IP:-192.168.140.1}"

RADIUS_SECRET_FILE="${RADIUS_SECRET_FILE:-$FILES_DIR/radius.secret}"
CLIENT_TMPL="$FILES_DIR/clients-6csef005w.conf.tmpl"
USERS_FILE_SRC="$FILES_DIR/radius-users"

START_MODE=0
for a in "$@"; do
  case "$a" in
    --start) START_MODE=1 ;;
  esac
done

# ---------- helpers ----------
detect_layout() {
  if   [ -d /etc/freeradius/3.0 ]; then echo "/etc/freeradius/3.0"
  elif [ -d /etc/freeradius     ]; then echo "/etc/freeradius"
  else echo "/etc/freeradius/3.0"; fi
}

detect_group() {
  if getent group freerad >/dev/null; then echo freerad
  elif getent group radiusd >/dev/null; then echo radiusd
  else echo freerad; fi
}

ETC="$(detect_layout)"
CLIENTS_D="$ETC/clients.d"
CLIENTS_CONF="$ETC/clients.conf"
MODS_AV="$ETC/mods-available"
MODS_EN="$ETC/mods-enabled"
MODS_CFG="$ETC/mods-config"
SERVICE_NAME="freeradius"
FR_GROUP="$(detect_group)"

# Robust secret discovery (handles path/case/layout quirks)
resolve_radius_secret() {
  if [ -f "$RADIUS_SECRET_FILE" ]; then return; fi
  local candidates=(
    "$FILES_DIR/radius.secret"
    "$(dirname "$0")/radius.secret"
    "$(dirname "$0")/../files/radius.secret"
    "$PWD/radius.secret"
    "$PWD/ap/files/radius.secret"
  )
  for f in "${candidates[@]}"; do
    if [ -f "$f" ]; then RADIUS_SECRET_FILE="$f"; echo "[i] Using radius secret: $RADIUS_SECRET_FILE"; return; fi
  done
  echo "[!] radius.secret not found. Looked in: ${candidates[*]}"; exit 2
}

require_root() {
  if [ "${EUID:-$(id -u)}" -ne 0 ]; then echo "[!] Run as root: sudo $0" >&2; exit 1; fi
}

require_files() {
  [ -f "$USERS_FILE_SRC" ] || { echo "[!] Missing users source: $USERS_FILE_SRC"; exit 2; }
  resolve_radius_secret
}

install_pkgs() {
  echo "[*] Installing packages..."
  apt-get update -y
  DEBIAN_FRONTEND=noninteractive apt-get install -y freeradius freeradius-utils iptables-persistent >/dev/null
}

fix_clients_dir_perms() {
  echo "[*] Ensuring $CLIENTS_D perms..."
  mkdir -p "$CLIENTS_D"
  chown root:"$FR_GROUP" "$CLIENTS_D" || true
  chmod 0750 "$CLIENTS_D" || true
}

fix_default_clients_conf() {
  echo "[*] Fixing default clients.conf TLS comment syntax..."
  sudo sed -i '17{/^}$/d;}' "$CLIENTS_CONF" 2>/dev/null || true
}
write_client_entry() {
  echo "[*] Writing AP client entry..."
  local secret; secret="$(tr -d '[:space:]' < "$RADIUS_SECRET_FILE")"
  [ -n "$secret" ] || { echo "[!] radius.secret empty"; exit 2; }
  local out="$CLIENTS_D/6csef005w.conf"
  if [ -s "$CLIENT_TMPL" ]; then
    sed -e "s#__RADIUS_SECRET__#${secret}#g" -e "s#__AP_IP__#${AP_IP}#g" "$CLIENT_TMPL" > "$out"
  else
    cat > "$out" <<EOF
client ap-6csef005w {
  ipaddr   = ${AP_IP}
  secret   = ${secret}
  nastype  = other
}
EOF
  fi
  chown root:"$FR_GROUP" "$out"; chmod 0640 "$out"
}

# Remove ANY existing localhost client blocks, then re-add a clean one
ensure_localhost_client() {
  echo "[*] Normalizing localhost (127.0.0.1) client..."
  local secret; secret="$(tr -d '[:space:]' < "$RADIUS_SECRET_FILE")"
  [ -n "$secret" ] || { echo "[!] radius.secret empty"; exit 2; }

  # backup then strip any existing 127.0.0.1 client blocks using perl (block-wise)
  for f in "$CLIENTS_CONF" "$CLIENTS_D"/*.conf; do
    [ -f "$f" ] || continue
    cp -a "$f" "$f.bak.$(date +%s)" || true
    perl -0777 -pe 's/\n?client\s+[^{]*\{\s*[^}]*ipaddr\s*=\s*127\.0\.0\.1[^}]*\}\s*//sg' -i "$f"
  done

  # write a canonical localhost client
  cat > "$CLIENTS_D/localhost.conf" <<EOF
client localhost {
  ipaddr = 127.0.0.1
  secret = ${secret}
  nastype = other
}
EOF
  chown root:"$FR_GROUP" "$CLIENTS_D/localhost.conf"; chmod 0640 "$CLIENTS_D/localhost.conf"
}

ensure_clients_include() {
  echo "[*] Rewriting clients.conf with explicit includes..."
  mkdir -p "$CLIENTS_D"
  # Build a fresh clients.conf
  {
    echo "# Auto-generated by setup-radius-server.sh"
    echo "# Do not edit manually; manage client files in $CLIENTS_D"
    # Add an include line for each existing *.conf
    for f in "$CLIENTS_D"/*.conf; do
      [ -f "$f" ] || continue
      echo "\$INCLUDE clients.d/$(basename "$f")"
    done
  } > "$CLIENTS_CONF"
  chown root:"$FR_GROUP" "$CLIENTS_CONF"
  chmod 0640 "$CLIENTS_CONF"
}

enable_site_inner_tunnel() {
  echo "[*] Ensuring inner-tunnel site enabled..."
  if [ -d "$ETC/sites-available" ] && [ -d "$ETC/sites-enabled" ] && [ -e "$ETC/sites-available/inner-tunnel" ]; then
    [ -e "$ETC/sites-enabled/inner-tunnel" ] || ln -s "$ETC/sites-available/inner-tunnel" "$ETC/sites-enabled/inner-tunnel"
  fi
}

enable_modules() {
  echo "[*] Enabling eap, mschap, files modules & PEAP default..."
  [ -e "$MODS_EN/eap"    ] || [ ! -e "$MODS_AV/eap"    ] || ln -s "$MODS_AV/eap"    "$MODS_EN/eap"
  [ -e "$MODS_EN/mschap" ] || [ ! -e "$MODS_AV/mschap" ] || ln -s "$MODS_AV/mschap" "$MODS_EN/mschap"
  [ -e "$MODS_EN/files"  ] || [ ! -e "$MODS_AV/files"  ] || ln -s "$MODS_AV/files"  "$MODS_EN/files"
  # Force default_eap_type = peap in mods-available/eap (if present)
  if [ -f "$MODS_AV/eap" ]; then
    if grep -Eq '^[[:space:]]*default_eap_type[[:space:]]*=' "$MODS_AV/eap"; then
      sed -ri 's|^[[:space:]]*default_eap_type[[:space:]]*=.*|        default_eap_type = peap|' "$MODS_AV/eap" || true
    fi
  fi
}

install_users() {
  echo "[*] Installing users file..."
  cp -a "$USERS_FILE_SRC" "$ETC/users"
  chown root:"$FR_GROUP" "$ETC/users"; chmod 0640 "$ETC/users"
}

fix_permissions() {
  echo "[*] Fixing mods-config/files perms..."
  if [ -d "$MODS_CFG/files" ]; then
    chown -R root:"$FR_GROUP" "$MODS_CFG/files" || true
    chmod 0750 "$MODS_CFG/files" || true
    [ -f "$MODS_CFG/files/authorize" ] && chmod 0640 "$MODS_CFG/files/authorize" || true
  fi
}

check_config() {
  echo "[*] freeradius -XC..."
  systemctl stop "$SERVICE_NAME" 2>/dev/null || true
  freeradius -XC || { echo "[!] freeradius -XC failed"; exit 3; }
}

restart_service() {
  if [ "$START_MODE" -eq 1 ]; then
    echo "[*] Starting and enabling $SERVICE_NAME..."
    systemctl restart "$SERVICE_NAME"
    systemctl enable "$SERVICE_NAME" || true
    systemctl status --no-pager "$SERVICE_NAME" || true
  else
    echo "[i] Service not started. Use --start to enable after a clean -XC."
  fi
}

enable_icmp_persistent() {
  echo "[*] Allowing ICMP echo-request..."
  iptables -C INPUT -p icmp --icmp-type echo-request -j ACCEPT 2>/dev/null || iptables -I INPUT 1 -p icmp --icmp-type echo-request -j ACCEPT
  iptables-save > /etc/iptables/rules.v4 || true
  command -v netfilter-persistent >/dev/null && netfilter-persistent save || true
}

summary() {
  echo "[OK] FreeRADIUS configured."
  echo " - ETC:        $ETC"
  echo " - Clients.d:  $CLIENTS_D (explicit includes in clients.conf)"
  echo " - Users:      $ETC/users"
  echo " - inner-tunnel enabled, eap default=peap"
}

main() {
  require_root
  require_files
  install_pkgs
  fix_clients_dir_perms
  fix_default_clients_conf
  write_client_entry
  ensure_localhost_client
  ensure_clients_include
  enable_site_inner_tunnel
  enable_modules
  install_users
  fix_permissions
  check_config
  restart_service
  enable_icmp_persistent
  summary
}
main "$@"
